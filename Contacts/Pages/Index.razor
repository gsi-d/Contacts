@page "/"
@using Contacts.Service
@using global::Contacts.Model


<PageTitle>Index</PageTitle>
@{
    if (isLoading)
    {
        <text>Carregando...</text>
    }
    else
    {
        <div class="d-flex justify-content-center align-items-center table-bordered ">

                <table>
                    <thead>
                        <tr>
                            <th>Name</th>
                            <th class="d-flex ms-5 me-4">Contact Number</th>
                            <th>Email</th>
                        </tr>
                    </thead>
                    <tbody>
                        @foreach (var contact in Contact)
                        {
                            <tr>
                                <td>@contact.Name</td>
                                <td class="d-flex ms-5 me-4 align-items-center">@contact.ContactNumber</td>
                                <td>@contact.Email</td> |
                                <td>
                                    <a href="/contact/detail/@contact.Id"><button class="btn-primary">Details</button></a> |
                                    <a href="/contact/edit/@contact.Id"><button class="btn-outline-primary">Edit</button></a> |
                                    <button onclick="@(() => Delete(contact.Id))" class="btn-danger">Delete</button>
                                </td>
                            </tr>
                        }
                    </tbody>
                </table>
        </div>
        <div class="d-flex justify-content-center align-items-center mt-4">
            <a href="/contact/new/"><button class="btn-success">New Register</button></a>
        </div>

    }
}

@code {

    [Inject] private IContactService _contactService { get; set; }
    public List<Contact> Contact { get; set; } = new();
    public bool isLoading = true;

    protected override async Task OnInitializedAsync()
    {
        await GetContacts();
    }

    protected async override Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            await GetContacts();

            if (!Contact.Any())
            {
            }
        }
    }

    public async Task GetContacts()
    {
        List<Contact> contactsList = _contactService.OnGet();

        if (contactsList.Count() > 0)
        {
            Contact = contactsList;
            isLoading = false;
        }
        else
        {
            Contact = new List<Contact>();
            isLoading = false;
        }
    }

    public async Task Delete(int id)
    {
        int response = _contactService.Delete(id);
        if (response != 0)
        {
            await _jsRunTime.InvokeVoidAsync("alert", "Contact deleted successfully!");
            _navigationManager.NavigateTo(_navigationManager.Uri, forceLoad: true);
        }
        else
        {
            await _jsRunTime.InvokeVoidAsync("alert", "Error when deleting contact.");
        }
    }
}
